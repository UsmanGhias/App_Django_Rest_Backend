# Generated by Django 3.2.11 on 2024-01-03 11:06

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('password', models.CharField(max_length=200)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('has_account', models.BooleanField(default=False)),
                ('is_in_group', models.BooleanField(default=False)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('age', models.PositiveIntegerField(null=True)),
                ('nationality', models.TextField(max_length=20, null=True)),
                ('city', models.TextField(max_length=15, null=True)),
                ('university', models.TextField(max_length=40, null=True)),
                ('description', models.TextField(max_length=500, null=True)),
                ('instagram', models.TextField(max_length=15, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('W', 'Female'), ('X', 'Non-binary')], default='M', max_length=1)),
                ('show_me', models.CharField(choices=[('M', 'Men'), ('W', 'Women'), ('X', 'Everyone')], default='W', max_length=1)),
                ('blocked_profiles', models.ManyToManyField(blank=True, related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('type', models.CharField(blank=True, choices=[('PRIVATE', 'private'), ('GROUP', 'group')], default='PRIVATE', max_length=10, null=True)),
                ('participants', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('W', 'Female'), ('X', 'Non-binary')], default='M', max_length=1)),
                ('age', models.PositiveIntegerField(null=True)),
                ('total_members', models.PositiveIntegerField(null=True)),
                ('share_link', models.CharField(max_length=100, null=True, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('likes', models.ManyToManyField(blank=True, related_name='group_likes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('code', models.CharField(max_length=6)),
                ('expiration', models.DateTimeField(default=datetime.datetime(2024, 1, 3, 11, 21, 41, 177663, tzinfo=utc))),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification_code', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('profile', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MyGroupMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.group')),
                ('sender', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('conversation', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.conversation')),
                ('sender', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('profile1', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='profile1_matches', to=settings.AUTH_USER_MODEL)),
                ('profile2', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='profile2_matches', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='matches',
            field=models.ManyToManyField(blank=True, related_name='matches', to='api.Match'),
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='member_group', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='owner',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='owner_profile', to=settings.AUTH_USER_MODEL),
        ),
    ]
